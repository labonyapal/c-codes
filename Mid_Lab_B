#include <iostream>
#include <unordered_map>
using namespace std;

// Node structure for the ternary tree
struct node {
    int data;       // Value of the node
    node *left;     // Pointer to the left child
    node *mid;      // Pointer to the middle child
    node *right;    // Pointer to the right child

    // Constructor to initialize the node
     node(int v){
     data=v;
     left=NULL;
     mid=NULL;
     right=NULL;
     }
};

// Function to perform the custom traversal
void halum(node *root) {
    if (!root) return;

    // Traverse the left sub-tree
    halum(root->left);

    // Traverse the mid sub-tree
    halum(root->mid);

    // Print the current node value
    cout << root->data << " ";

    // Traverse the right sub-tree
    halum(root->right);
}

// Function to construct the ternary tree
node* Tree(int rootValue, int n) {
    // Create the root node
    node *root = new node(rootValue);

    // Map to store nodes for quick access
    unordered_map<int, node *> billu;
    billu[rootValue] = root;

    // Perform the operations
    for (int i = 0; i < n; ++i) {
        int op, key, val;
        cin >> op >> key >> val;

        // Find the node with the value 'key'
        if (billu.find(key) != billu.end()) {
            node *parent = billu[key];
            node *child = new node(val); // Create the child node
            billu[val] = child;          // Add child to the map

            // Set the appropriate child pointer based on op
            if (op == 0) {
                parent->left = child;
            } else if (op == 1) {
                parent->mid = child;
            } else if (op == 2) {
                parent->right = child;
            }
        }
    }

    return root;
}

// Main function
int main() {
    // Read the root value
    int r;
    cin >> r;

    // Read the number of operations
    int n;
    cin >> n;

    // Construct the tree
    Node *root = Tree(r, n);

    // Print the tree in the custom order
    halum(root);
    cout << endl;

    return 0;
}
