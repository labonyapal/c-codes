#include <bits/stdc++.h>
using namespace std;

// Create a Binary Tree

/*        1
        /   \
       3     5
      / \    / \
     7  11  17  NULL
*/

// Node structure to represent each node in the binary tree
struct node {
    int num;       // Data stored in the node
    node *left;     // Pointer to the left child
    node *right;    // Pointer to the right child

    // Constructor to initialize the node with data
    node(int d) {
        num = d;
        left = NULL;
        right = NULL;
    }
};

// Function to build the binary tree
node *Tree(node *root) {
    //cout << "Enter the data: ";
    int num;
    cin >> num;

    // Create a new node with the input data
    root = new node(num);

    // Base case for recursion
    if (num == -1) {
        return NULL; // If data is -1, this node is NULL
    }

    // Recursively build the left and right subtrees

    root->left = Tree(root->left);


    root->right = Tree(root->right);

    return root; // Return the root of the subtree
}
void inorder(node *root){
    // Base case
    if(root == NULL){
        return;
    }

    // Recursive case
    inorder(root->left); // First go to the leftmost node

    cout << root->num << " "; // Print the root

    inorder(root->right); // Go to the rightmost node
}

// Function to perform level-order traversal of the tree
/*void print(node *root) {
    queue<node *> q; // Queue to store the nodes for level order traversal
    stack<node *> s; // Stack to store the nodes for reverse level order traversal
    q.push(root);

    while (!q.empty())
    {
        node *temp = q.front();
        q.pop();
        s.push(temp);

        if (temp->right)
        {
            q.push(temp->right);
        }

        if (temp->left)
        {
            q.push(temp->left);
        }
    }

    while (!s.empty())
    {
        cout << s.top()->num << " ";
        s.pop();
    }
}*/

int main() {
    node *root = NULL;

    // Build the binary tree
    root = Tree(root);
    inorder(root);
    // Example input: 1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1

    // Print the tree
   // cout << "Level-order traversal of the tree: ";
    //print(root);
    // Example output: 1 3 5 7 11 17

    return 0;
}
