//insertion with linked list

#include <bits/stdc++.h>
using namespace std;

struct ll {
    struct node {
        node* next;
        int val;
    };

    node* head = NULL;
    node* tail = NULL;

    void insert_first(int x) {
        node* a = (node*)malloc(sizeof(node));
        a->val = x;
        a->next = head;
        head = a;
        if (tail == NULL) {
            tail = a;
        }
    }

    void print() {
        node* b = head;
        while (b) {
            cout << b->val << " ";
            b = b->next;
        }
        cout << endl;
    }

    void sortedinsert(node** head_ref, node* new_node) {
        node* current;
        // Special case for the head end
        if (*head_ref == NULL || (*head_ref)->val >= new_node->val) {
            new_node->next = *head_ref;
            *head_ref = new_node;
        } else {
            // Locate the node before the point of insertion
            current = *head_ref;
            while (current->next != NULL && current->next->val < new_node->val) {
                current = current->next;
            }
            new_node->next = current->next;
            current->next = new_node;
        }
    }

    void insertion_sort() {
        node* sorted = NULL;
        node* current = head;
        while (current != NULL) {
            node* next = current->next;
            // Insert current in sorted linked list
            sortedinsert(&sorted, current);
            // Update current
            current = next;
        }
        head = sorted;
    }
};

int main() {
    ll pak;
    int n, i, num;
    cin >> n;
    for (i = 0; i < n; i++) {
        cin >> num;
        pak.insert_first(num);
    }
    pak.insertion_sort();
    pak.print();
    return 0;
}

